Le code que vous avez envoyé représente un modèle dans Odoo qui gère les offres faites sur des propriétés immobilières, ainsi que leur statut et leur gestion. Voici une explication détaillée de chaque partie du modèle `EstatePropertyOffer` :

### 1. Définition du modèle :
```python
class EstatePropertyOffer(models.Model):
    _name = "estate.property.offer"
    _description = "Realestate Property Offer"
    _order = "price desc"
```
- **_name** : Définit le nom du modèle, ici "estate.property.offer", qui sera utilisé dans la base de données.
- **_description** : Donne une brève description du modèle, ici pour une offre immobilière.
- **_order** : Détermine l'ordre par défaut des enregistrements. Ici, les offres sont triées par prix, de manière décroissante (du plus élevé au plus bas).

### 2. Champs (fields) du modèle :
Les champs sont les attributs qui vont définir les données stockées pour chaque offre.

#### a. `price` (float)
```python
price = fields.Float('Offer Amount', required=True)
```
- Ce champ enregistre le montant de l'offre. Il est obligatoire (required=True).

#### b. `status` (selection)
```python
status = fields.Selection(
    string='Offer Status',
    selection=[('accepted', 'Accepted'), ('refused', 'Refused')],
    help="Select status")
```
- Le champ `status` permet de définir le statut de l'offre : soit "accepted" (acceptée) soit "refused" (refusée).

#### c. `partner_id` (Many2one)
```python
partner_id = fields.Many2one("res.partner", string="Partner", copy=False)
```
- Ce champ relie l'offre à un partenaire, qui représente typiquement un client dans Odoo. Il s'agit d'une relation "Many2one" avec le modèle `res.partner`.

#### d. `property_id` (Many2one)
```python
property_id = fields.Many2one("estate.property", string="Property")
```
- Ce champ relie l'offre à une propriété spécifique. Il s'agit d'une relation "Many2one" avec le modèle `estate.property`.

#### e. `validity` (integer)
```python
validity = fields.Integer("Offer Validity", default=7)
```
- Ce champ définit la validité de l'offre en jours. Par défaut, la validité est de 7 jours.

#### f. `date_deadline` (date, computed)
```python
date_deadline = fields.Date(compute="_compute_date_deadline", inverse="_inverse_date_deadline")
```
- Ce champ est calculé automatiquement. Il représente la date limite de l'offre, qui est calculée à partir de la date de création de l'offre et de sa durée de validité.
- Il possède une méthode de calcul (`_compute_date_deadline`) et une méthode inverse (`_inverse_date_deadline`).

### 3. Contraintes et vérifications :
#### a. `@api.model` - Méthode `create` :
```python
@api.model
def create(self, vals):
    max_offer = self.env['estate.property.offer'].search([('property_id','=', vals['property_id'])], order='price desc', limit=1)
    if int(vals['price']) <= int(max_offer['price']):
        raise ValidationError("The offer [%d] should be higher than [%d]" % (int(vals['price']), int(max_offer['price'])))
```
- Lors de la création d'une nouvelle offre, cette méthode vérifie si le prix de l'offre est supérieur à celui de l'offre la plus élevée existante pour la même propriété. Si ce n'est pas le cas, elle soulève une erreur (`ValidationError`).

#### b. `@api.constrains` - Méthode de vérification des prix :
```python
@api.constrains('price')
def _check_offer_price(self):
    for record in self:
        if (100 * float(record.price)/float(record.property_id.expected_price)) < 90:
            raise ValidationError("The offer price should be atleast 90% of the expected price.")
```
- Cette méthode vérifie que le prix de l'offre est au moins 90% du prix attendu de la propriété. Si ce n'est pas le cas, une exception est levée.

#### c. `@api.depends` - Méthode de calcul de la date limite :
```python
@api.depends("validity")
def _compute_date_deadline(self):
    for record in self:
        if record.create_date:
            record.date_deadline = record.create_date + timedelta(days=record.validity)
```
- Cette méthode calcule automatiquement la date limite en fonction de la date de création de l'offre et de sa validité.

### 4. Actions d'acceptation et de refus des offres :
#### a. `action_accept_offer` :
```python
def action_accept_offer(self):
    for record in self:
        if record.property_id.state == 'offer_accepted':
            raise UserError("Already accepted an offer for this property")
        if record.property_id.state not in('sold', 'canceled'):
            record.property_id.selling_price = record.price
            record.property_id.state = 'offer_accepted'
            record.property_id.buyer = record.partner_id
        else:
            raise UserError("Cannot accept an offer for a Sold/Canceled Property")
    return self.write({'status': 'accepted'})
```
- Cette méthode permet d'accepter une offre. Elle vérifie d'abord si une offre a déjà été acceptée pour cette propriété. Si ce n'est pas le cas et que la propriété n'est pas vendue ni annulée, l'offre est acceptée et la propriété est mise à jour avec le prix et l'acheteur.

#### b. `action_refuse_offer` :
```python
def action_refuse_offer(self):
    for record in self:
        if record.property_id.state in('sold', 'canceled'):
            raise UserError("Cannot refuse an offer for a Sold/Canceled Property")
    return self.write({'status': 'refused'})
```
- Cette méthode permet de refuser une offre, à condition que la propriété ne soit pas déjà vendue ou annulée.

### 5. Contraintes SQL :
```python
_sql_constraints = [
    ('check_offer_price', 'CHECK(price > 0)', 'The offer price must a positive number.'),
]
```
- Cette contrainte SQL s'assure que le prix de l'offre est toujours supérieur à zéro.

---

En résumé, ce modèle `EstatePropertyOffer` permet de gérer les offres faites pour l'achat d'une propriété. Il inclut des validations pour s'assurer que les offres respectent des conditions logiques (par exemple, un prix d'offre supérieur à celui des offres précédentes, ou un prix minimum de 90 % du prix attendu). Il permet également de gérer l'acceptation et le refus des offres, tout en mettant à jour l'état des propriétés associées.

Si vous avez des questions ou souhaitez des éclaircissements supplémentaires, n'hésitez pas à demander !